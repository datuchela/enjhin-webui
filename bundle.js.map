{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://enjhin-editor/./src/types.ts","webpack://enjhin-editor/./src/dom.ts","webpack://enjhin-editor/./src/math.ts","webpack://enjhin-editor/./src/physics.ts","webpack://enjhin-editor/./src/handlers.ts","webpack://enjhin-editor/./src/canvas.ts","webpack://enjhin-editor/./src/constants.ts","webpack://enjhin-editor/./src/state.ts","webpack://enjhin-editor/./src/main.ts","webpack://enjhin-editor/./src/utils.ts"],"sourcesContent":["import type { Particle, SoftBody, Spring } from \"./physics\";\n\nexport enum Mode {\n  SELECT,\n  INSERT,\n  MOVE,\n  CONNECT,\n  DELETE,\n};\n\nexport type Color = string | CanvasGradient | CanvasPattern;\n\nexport type EventWithValue = Event & { target: { value: string } };\n\nexport type ParticleId = string;\nexport type SpringId = string;\nexport type SoftBodyId = string;\n\nexport type EngineData = {\n  bodies: SoftBody[];\n  springs: Spring[];\n  particles: Particle[];\n}\n\nexport type Elements = {\n  bodyList: HTMLMenuElement;\n  exportButton: HTMLButtonElement;\n  newBodyButton: HTMLButtonElement;\n  modeButtons: { mode: Mode, element: HTMLButtonElement }[];\n}\n\n","import { Editor } from \"./state\";\nimport type { EventWithValue } from \"./types\";\n\nexport function refreshListView(state: Editor) {\n  const { elements: { bodyList }, data: { bodies } } = state;\n  bodyList.innerHTML = \"\";\n\n  bodies.forEach((body) => {\n    const listItem = document.createElement(\"li\");\n    const itemRadio = document.createElement(\"input\");\n    const itemLabel = document.createElement(\"label\");\n\n    listItem.classList.add(\"flex\", \"gap-2\", \"p-3\");\n\n    itemRadio.type = \"radio\";\n    itemRadio.id = body.id;\n    itemRadio.name = \"body\";\n    itemRadio.value = body.id;\n    itemRadio.onchange = (e) => {\n      state.setCurrentBodyId((e as EventWithValue).target.value);\n      console.log(state.currentBodyId);\n    };\n    itemRadio.checked = state.currentBodyId === body.id;\n\n    itemLabel.htmlFor = body.id;\n    itemLabel.innerText = `Body ${body.id}`;\n\n    listItem.appendChild(itemRadio);\n    listItem.appendChild(itemLabel);\n    bodyList.appendChild(listItem);\n  });\n}\n\nexport function refreshButtons(state: Editor) {\n  state.elements.modeButtons.forEach((btn) => {\n    btn.element.disabled = false;\n    if (btn.mode !== state.mode) return;\n    btn.element.disabled = true;\n  });\n}\n\n","export class Vector2 {\n  private vector: [number, number];\n\n  constructor(x: number, y: number) {\n    this.vector = [x, y];\n  }\n\n  get x() {\n    return this.vector[0];\n  }\n\n  get y() {\n    return this.vector[1];\n  }\n\n  set x(newX: number) {\n    this.vector[0] = newX;\n  }\n\n  set y(newY: number) {\n    this.vector[1] = newY;\n  }\n\n  get length() {\n    return Math.sqrt(this.x ** 2 + this.y ** 2);\n  }\n\n  set length(len) {\n    throw new Error(\n      `Tried to set ${len} as vector length, you cannot set vector length explicitly.`\n    );\n  }\n\n  get unit() {\n    if (this.length === 0) return new Vector2(0, 0);\n    return new Vector2(this.x / this.length, this.y / this.length);\n  }\n\n  set unit(vector: Vector2) {\n    throw new Error(\n      `Tried to set ${vector} as a unit vector, you cannot set unit vector explicitly.`\n    );\n  }\n\n  clone = (): Vector2 => {\n    return new Vector2(this.x, this.y);\n  }\n\n  static isEqual = (v1: Vector2, v2: Vector2): boolean => {\n    return v1.x === v2.x && v1.y === v2.y;\n  };\n\n  static crossProduct = (v1: Vector2, v2: Vector2): number => {\n    return v1.x * v2.y - v1.y * v2.x;\n  };\n\n  static dotProduct = (v1: Vector2, v2: Vector2): number => {\n    return v1.x * v2.x + v1.y * v2.y;\n  };\n\n  static add = (vector1: Vector2, vector2: Vector2) => {\n    return new Vector2(vector1.x + vector2.x, vector1.y + vector2.y);\n  };\n\n  static subtract = (vector1: Vector2, vector2: Vector2) => {\n    return new Vector2(vector1.x - vector2.x, vector1.y - vector2.y);\n  };\n\n  static scale = (vector: Vector2, scalar: number) => {\n    return new Vector2(vector.x * scalar, vector.y * scalar);\n  };\n\n  draw = (\n    ctx: CanvasRenderingContext2D,\n    startX: number,\n    startY: number,\n    options?: { color: string }\n  ) => {\n    ctx.strokeStyle = options?.color ?? \"red\";\n    ctx.beginPath();\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(startX + this.x, startY + this.y);\n    ctx.stroke();\n  };\n}\n","import { Vector2 } from \"./math\";\nimport type { ParticleId, SoftBodyId, SpringId } from \"./types\";\n\nconst ids = {\n  softBodyId: 0,\n  particleId: 0,\n  springId: 0,\n}\n\nexport class SoftBody {\n  id: SoftBodyId;\n  particles: ParticleId[];\n  springs: SpringId[];\n  constructor(particles?: ParticleId[], springs?: SpringId[]) {\n    this.id = `${++ids.softBodyId}`;\n    this.particles = particles ?? [];\n    this.springs = springs ?? [];\n  }\n}\n\nexport class Particle {\n  id: ParticleId;\n  position: Vector2;\n  springIds: SpringId[];\n  bodyIds: SoftBodyId[];\n  constructor(position: Vector2) {\n    this.id = `${++ids.particleId}`;\n    this.position = position;\n    this.springIds = [];\n    this.bodyIds = [];\n  }\n}\n\nexport class Spring {\n  id: SpringId;\n  particles: [Particle, Particle];\n  particleIds: [ParticleId, ParticleId];\n  bodyIds: SoftBodyId[];\n  constructor(particles: [Particle, Particle]) {\n    this.id = `${++ids.springId}`;\n    this.particles = particles;\n    this.particleIds = [particles[0].id, particles[1].id];\n    this.bodyIds = [];\n  }\n}\n","import { refreshButtons, refreshListView } from \"./dom\";\nimport { Mode } from \"./types\";\nimport { Vector2 } from \"./math\";\nimport { Editor } from \"./state\";\nimport { SoftBody, Particle } from \"./physics\";\nimport { PARTICLE_GRAB_RADIUS } from \"./constants\";\n\nexport function handleMouseDown(_: MouseEvent, state: Editor) {\n  state.mouse.isMouseDown = true;\n  state.updateClosestParticle();\n\n  switch (state.mode) {\n    case Mode.SELECT:\n      break;\n    case Mode.INSERT:\n      if (state.currentBodyId === null) break;\n      const newParticle = new Particle(state.mouse.position.clone());\n      state.addParticle(newParticle, state.currentBodyId);\n      break;\n    case Mode.MOVE:\n      break;\n    case Mode.CONNECT:\n      const { particle, distance } = getClosestParticle(state.mouse.position, state.data.particles);\n      if (!particle || distance > PARTICLE_GRAB_RADIUS) break;\n      state.mouse.savedParticle = particle;\n      break;\n    case Mode.DELETE:\n      if (!state.mouse.closestParticle) break;\n      state.removeParticleById(state.mouse.closestParticle.id);\n      break;\n  }\n}\n\nexport function handleMouseMove(e: MouseEvent, state: Editor) {\n  const rect = state.canvasElement.getBoundingClientRect();\n  state.mouse.position.x = e.clientX - rect.left;\n  state.mouse.position.y = e.clientY - rect.top;\n  state.updateClosestParticle();\n\n  switch (state.mode) {\n    case Mode.SELECT:\n      break;\n    case Mode.INSERT:\n      break;\n    case Mode.MOVE:\n      if (!state.mouse.isMouseDown || !state.mouse.closestParticle) break;\n      move(state.mouse.position, state.mouse.closestParticle);\n      break;\n    case Mode.CONNECT:\n      break;\n  }\n}\n\nexport function handleMouseUp(_: MouseEvent, state: Editor) {\n  state.mouse.isMouseDown = false;\n\n  switch (state.mode) {\n    case Mode.CONNECT:\n      const { particle, distance } = getClosestParticle(state.mouse.position, state.data.particles);\n\n      if ((!state.currentBodyId || !particle || distance > PARTICLE_GRAB_RADIUS || !state.mouse.savedParticle)\n        || state.mouse.savedParticle.id === particle.id\n      ) break;\n\n      const spring = state.connectParticles([state.mouse.savedParticle, particle]);\n      state.addSpring(spring, state.currentBodyId);\n      break;\n    default:\n      state.mouse.closestParticle = null;\n      state.mouse.savedParticle = null;\n      break;\n  }\n}\n\nexport function handleNewBodyClick(state: Editor) {\n  const newBody = new SoftBody();\n  state.addBody(newBody);\n  state.setCurrentBodyId(newBody.id);\n  refreshListView(state);\n}\n\nexport function handleDeleteBodyClick(state: Editor) {\n  if (!state.currentBodyId) return;\n  state.removeBodyById(state.currentBodyId);\n  if (state.data.bodies.length > 0) {\n    state.setCurrentBodyId(state.data.bodies[state.data.bodies.length - 1].id);\n  } else {\n    state.setCurrentBodyId(null);\n  }\n  refreshListView(state);\n}\n\nexport function handleModeClick(mode: Mode, state: Editor) {\n  state.setMode(mode);\n  refreshButtons(state);\n}\n\nexport function handleExportClick(_: MouseEvent, state: Editor) {\n  const exportData = {\n    particles: state.data.particles.map(p => {\n      return {\n        id: p.id,\n        x: p.position.x,\n        y: p.position.y,\n      };\n    }),\n    springs: state.data.springs.map(s => {\n      return {\n        p1: s.particleIds[0],\n        p2: s.particleIds[1],\n      };\n    }),\n  }\n  console.log(JSON.stringify(exportData));\n}\n\nexport type ClosestParticle = {\n  particle: Particle | null;\n  distance: number;\n}\n\nexport function getClosestParticle(mousePos: Vector2, particles: Particle[]): ClosestParticle {\n  let closestDistance: number = Number.MAX_SAFE_INTEGER;\n  let closestParticle: Particle | null = null;\n\n  particles.forEach((particle) => {\n    const currDistance = Vector2.subtract(mousePos, particle.position).length;\n    if (currDistance < closestDistance) {\n      closestParticle = particle;\n      closestDistance = currDistance;\n    }\n  });\n\n  return { particle: closestParticle, distance: closestDistance };\n}\n\nfunction move(mousePos: Vector2, particle: Particle) {\n  // NOTE: Right now the program doesn't take into account where exactly on the particle \n  // mouse has been pressed, it just moves the center of the particle towards mouse position.\n  // TODO: Move particles based on where the mouse has been pressed on them.\n  particle.position = mousePos.clone();\n}\n","import { CANVAS_BACKGROUND, CANVAS_HEIGHT, PARTICLE_COLOR, PARTICLE_GRAB_RADIUS, PARTICLE_RADIUS, SPRING_COLOR } from \"./constants\";\nimport { Mode, type Color } from \"./types\";\nimport { Vector2 } from \"./math\";\nimport type { Editor } from \"./state\";\nimport type { Particle, Spring } from \"./physics\";\n\nexport class Canvas {\n  element: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  _mouseCoords: Vector2 = new Vector2(16, CANVAS_HEIGHT - 20);\n  _mouseCoordsColor: Color = \"white\";\n\n  constructor(element: HTMLCanvasElement) {\n    this.element = element;\n    const ctx = element.getContext(\"2d\");\n    if (ctx === null) throw new Error(\"Unable to get 2d context from canvas\");\n    this.ctx = ctx;\n  }\n\n  redraw = (state: Editor, _timeStamp?: number) => {\n    this.clearBackground(CANVAS_BACKGROUND);\n    this.drawSprings(state.data.springs);\n    if (state.mode === Mode.CONNECT && state.mouse.isMouseDown && state.mouse.savedParticle) {\n      drawLine(state.ctx, state.mouse.savedParticle.position, state.mouse.position, \"white\", 1);\n    }\n    this.drawParticles(state.data.particles, state.mouse.closestParticle);\n    this.drawCoordinates(state.mouse.position, this._mouseCoords, this._mouseCoordsColor);\n  }\n\n  clearBackground = (color: Color) => {\n    clearBackground(this.ctx, color);\n  };\n\n  drawParticles = (particles: Particle[], closestParticle: Particle | null) => {\n    particles.forEach((particle) => {\n      if (closestParticle && (closestParticle.id === particle.id)) {\n        drawCircleStroke(this.ctx, particle.position, PARTICLE_GRAB_RADIUS, \"white\");\n      }\n      drawCircle(this.ctx, particle.position, PARTICLE_RADIUS, PARTICLE_COLOR);\n    });\n  }\n\n  drawSprings = (springs: Spring[]) => {\n    springs.forEach((spring) => {\n      drawLine(this.ctx, spring.particles[0].position, spring.particles[1].position, SPRING_COLOR, 2);\n    });\n  }\n\n  drawCoordinates(mousePosition: Vector2, drawPosition: Vector2, color: Color) {\n    this.ctx.save();\n    this.ctx.fillStyle = color;\n    this.ctx.fillText(`x: ${mousePosition.x}  y: ${mousePosition.y}`, drawPosition.x, drawPosition.y);\n    this.ctx.restore();\n\n  }\n}\n\nexport function drawCircle(ctx: CanvasRenderingContext2D, center: Vector2, radius: number, color: Color) {\n  ctx.save();\n  ctx.fillStyle = color;\n  ctx.strokeStyle = \"blue\";\n  ctx.beginPath();\n  ctx.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n  ctx.fill();\n  ctx.restore();\n}\n\nexport function drawCircleStroke(ctx: CanvasRenderingContext2D, center: Vector2, radius: number, color: Color) {\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 2;\n  ctx.beginPath();\n  ctx.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n  ctx.stroke();\n  ctx.restore();\n}\n\nexport function drawLine(ctx: CanvasRenderingContext2D, start: Vector2, end: Vector2, color: Color, lineWidth?: number) {\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth ?? 1;\n  ctx.moveTo(start.x, start.y);\n  ctx.lineTo(end.x, end.y);\n  ctx.stroke();\n  ctx.restore();\n}\n\nexport function clearBackground(ctx: CanvasRenderingContext2D, color: Color) {\n  ctx.save();\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.restore();\n}\n","export const CANVAS_WIDTH = 1366;\nexport const CANVAS_HEIGHT = 800;\nexport const CANVAS_BACKGROUND = \"black\";\nexport const PARTICLE_RADIUS = 5;\nexport const PARTICLE_GRAB_RADIUS = PARTICLE_RADIUS + 3;\nexport const PARTICLE_COLOR = \"#FCE93D\";\nexport const PARTICLE_COLOR_FOCUS = \"#D9CB40\";\nexport const SPRING_COLOR = \"#FFFFFF\";\n\n\n","import { Canvas } from \"./canvas\";\nimport { PARTICLE_GRAB_RADIUS } from \"./constants\";\nimport { getClosestParticle } from \"./handlers\";\nimport { Vector2 } from \"./math\";\nimport { Particle, SoftBody, Spring } from \"./physics\";\nimport {\n  type ParticleId,\n  type SoftBodyId,\n  type SpringId,\n  type EngineData,\n  type Elements,\n  Mode,\n} from \"./types\";\n\ntype InitialState = {\n  data?: EngineData;\n  elements: Elements;\n}\n\nexport class Editor {\n  canvas: Canvas;\n  canvasElement: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  elements: Elements;\n  data: EngineData;\n  mode: Mode;\n  currentBodyId: SoftBodyId | null;\n  mouse: {\n    isMouseDown: boolean,\n    position: Vector2,\n    closestParticle: Particle | null,\n    savedParticle: Particle | null,\n  };\n\n  constructor(canvasElement: HTMLCanvasElement, initialState: InitialState) {\n    this.canvas = new Canvas(canvasElement);\n    this.canvasElement = this.canvas.element;\n    this.ctx = this.canvas.ctx;\n    this.elements = initialState.elements;\n\n    this.data = initialState.data ?? {\n      bodies: [],\n      springs: [],\n      particles: [],\n    };\n\n    this.mouse = {\n      position: new Vector2(0, 0),\n      isMouseDown: false,\n      closestParticle: null,\n      savedParticle: null,\n    };\n\n    this.mode = Mode.INSERT;\n    this.currentBodyId = null;\n  }\n\n  getBodyById = (id: SoftBodyId) => {\n    const body = this.data.bodies.find((body) => body.id === id);\n    if (!body) throw new Error(`Couldn't find body with id ${id}`);\n    return body;\n  }\n\n  getParticleById = (id: ParticleId) => {\n    const particle = this.data.particles.find((particle) => particle.id === id);\n    if (!particle) throw new Error(`Couldn't find particle with id ${id}`);\n    return particle;\n  }\n\n  getSpringById = (id: SpringId) => {\n    const spring = this.data.springs.find((spring) => spring.id === id);\n    if (!spring) throw new Error(`Couldn't find spring with id ${id}`);\n    return spring;\n  }\n\n  addBody = (body: SoftBody) => {\n    this.data.bodies.push(body);\n  }\n\n  addSpring = (spring: Spring, bodyId: SoftBodyId) => {\n    const body = this.getBodyById(bodyId);\n    spring.bodyIds.push(bodyId);\n    this.data.springs.push(spring);\n    body.springs.push(spring.id);\n  }\n\n  addParticle = (particle: Particle, bodyId: SoftBodyId) => {\n    const body = this.getBodyById(bodyId);\n    particle.bodyIds.push(bodyId);\n    this.data.particles.push(particle);\n    body.particles.push(particle.id);\n  }\n\n  connectParticles = (particles: [Particle, Particle]) => {\n    const spring = new Spring(particles);\n    particles.forEach(p => p.springIds.push(spring.id))\n    return spring;\n  }\n\n  setCurrentBodyId = (id: SoftBodyId | null) => {\n    this.currentBodyId = id;\n  }\n\n  setMode = (mode: Mode) => {\n    this.mode = mode;\n  }\n\n  updateClosestParticle = () => {\n    const { particle, distance } = getClosestParticle(this.mouse.position, this.data.particles);\n    if (!particle || distance > PARTICLE_GRAB_RADIUS) {\n      this.mouse.closestParticle = null;\n    } else {\n      this.mouse.closestParticle = particle;\n    }\n  }\n\n  removeParticleById = (id: ParticleId) => {\n    const particle = this.getParticleById(id);\n    particle.bodyIds.forEach(bodyId => {\n      const body = this.getBodyById(bodyId);\n      body.particles = body.particles.filter(pId => pId !== id);\n    });\n    particle.springIds.forEach(springId => this.removeSpringById(springId));\n    this.data.particles = this.data.particles.filter(p => p.id !== id);\n  }\n\n  removeSpringById = (id: SpringId) => {\n    const spring = this.getSpringById(id);\n    spring.bodyIds.forEach(bodyId => {\n      const body = this.getBodyById(bodyId);\n      body.springs = body.springs.filter(sId => sId !== id);\n    });\n    spring.particles.forEach(p => p.springIds = p.springIds.filter(sId => sId !== id));\n    this.data.springs = this.data.springs.filter(s => s.id !== id);\n  }\n\n  removeBodyById = (id: SoftBodyId) => {\n    const body = this.getBodyById(id);\n    body.particles.forEach(pId => {\n      this.removeParticleById(pId);\n    });\n    body.springs.forEach(sId => {\n      console.log(\"removingSprings from bodyRemove\");\n      this.removeSpringById(sId);\n    });\n    this.data.bodies = this.data.bodies.filter(b => b.id !== id);\n  }\n\n}\n","import { Mode } from \"./types\";\nimport { CANVAS_HEIGHT, CANVAS_WIDTH } from \"./constants\";\nimport { handleDeleteBodyClick, handleExportClick, handleModeClick, handleMouseDown, handleMouseMove, handleMouseUp, handleNewBodyClick } from \"./handlers\";\nimport { redrawAll } from \"./utils\";\nimport { Editor } from \"./state\";\n\nvar state: Editor;\n\n(() => {\n  const canvas = document.getElementById(\"enjhin-editor\") as HTMLCanvasElement | null;\n  const bodyList = document.getElementById(\"list-view\") as HTMLMenuElement | null;\n\n  // Buttons\n  const selectModeBtn = document.getElementById(\"mode-select\") as HTMLButtonElement | null;\n  const insertModeBtn = document.getElementById(\"mode-insert\") as HTMLButtonElement | null;\n  const moveModeBtn = document.getElementById(\"mode-move\") as HTMLButtonElement | null;\n  const connectModeBtn = document.getElementById(\"mode-connect\") as HTMLButtonElement | null;\n  const deleteModeBtn = document.getElementById(\"mode-delete\") as HTMLButtonElement | null;\n\n  const exportBtn = document.getElementById(\"export\") as HTMLButtonElement | null;\n  const newBodyBtn = document.getElementById(\"new-body\") as HTMLButtonElement | null;\n  const deleteBodyBtn = document.getElementById(\"delete-body\") as HTMLButtonElement | null;\n\n  if (!canvas) throw new Error(\"Couldn't get canvas\");\n  if (!bodyList) throw new Error(\"Couldn't get bodyList\");\n  if (!selectModeBtn) throw new Error(\"Couldn't get selectModeBtn\");\n  if (!insertModeBtn) throw new Error(\"Couldn't get insertModeBtn\");\n  if (!moveModeBtn) throw new Error(\"Couldn't get moveModeBtn\");\n  if (!connectModeBtn) throw new Error(\"Couldn't get connectModeBtn\");\n  if (!deleteModeBtn) throw new Error(\"Couldn't get deleteModeBtn\");\n  if (!exportBtn) throw new Error(\"Couldn't get exportBtn\");\n  if (!newBodyBtn) throw new Error(\"Couldn't get newBodyBtn\");\n  if (!deleteBodyBtn) throw new Error(\"Couldn't get deleteBodyBtn\");\n\n  canvas.width = CANVAS_WIDTH;\n  canvas.height = CANVAS_HEIGHT;\n\n  state = new Editor(canvas, {\n    elements: {\n      exportButton: exportBtn,\n      newBodyButton: newBodyBtn,\n      bodyList: bodyList,\n      modeButtons: [\n        { mode: Mode.SELECT, element: selectModeBtn },\n        { mode: Mode.INSERT, element: insertModeBtn },\n        { mode: Mode.MOVE, element: moveModeBtn },\n        { mode: Mode.CONNECT, element: connectModeBtn },\n        { mode: Mode.DELETE, element: deleteModeBtn },\n      ],\n    }\n  }\n  );\n\n  exportBtn.addEventListener(\"click\", (e) => handleExportClick(e, state));\n  newBodyBtn.addEventListener(\"click\", () => handleNewBodyClick(state));\n  deleteBodyBtn.addEventListener(\"click\", () => handleDeleteBodyClick(state));\n\n  state.canvasElement.addEventListener(\"mousedown\", (e) => handleMouseDown(e, state));\n  state.canvasElement.addEventListener(\"mousemove\", (e) => handleMouseMove(e, state));\n  state.canvasElement.addEventListener(\"mouseup\", (e) => handleMouseUp(e, state));\n  state.elements.modeButtons.forEach((btn) => {\n    btn.element.addEventListener(\"click\", () => handleModeClick(btn.mode, state));\n  });\n\n  redrawAll(state);\n\n  function frame(_timeStamp: number) {\n    state.canvas.redraw(state);\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n\n})();\n","import { refreshButtons } from \"./dom\";\nimport type { Editor } from \"./state\";\n\nexport function redrawAll(state: Editor) {\n  refreshButtons(state);\n}\n\n"],"names":["Mode","refreshListView","state","elements","bodyList","data","bodies","innerHTML","forEach","body","listItem","document","createElement","itemRadio","itemLabel","classList","add","type","id","name","value","onchange","e","setCurrentBodyId","target","console","log","currentBodyId","checked","htmlFor","innerText","appendChild","refreshButtons","modeButtons","btn","element","disabled","mode","Vector2","vector","constructor","x","y","this","newX","newY","length","Math","sqrt","len","Error","unit","clone","static","v1","v2","vector1","vector2","scalar","draw","ctx","startX","startY","options","strokeStyle","color","beginPath","moveTo","lineTo","stroke","ids","softBodyId","particleId","springId","SoftBody","particles","springs","Particle","position","springIds","bodyIds","Spring","particleIds","getClosestParticle","mousePos","closestDistance","Number","MAX_SAFE_INTEGER","closestParticle","particle","currDistance","subtract","distance","Canvas","_mouseCoords","CANVAS_HEIGHT","_mouseCoordsColor","getContext","redraw","_timeStamp","clearBackground","drawSprings","CONNECT","mouse","isMouseDown","savedParticle","drawLine","drawParticles","drawCoordinates","save","fillStyle","fillRect","canvas","width","height","restore","center","lineWidth","arc","PARTICLE_RADIUS","PI","fill","drawCircle","spring","mousePosition","drawPosition","fillText","start","end","Editor","canvasElement","initialState","INSERT","getBodyById","find","getParticleById","getSpringById","addBody","push","addSpring","bodyId","addParticle","connectParticles","p","setMode","updateClosestParticle","removeParticleById","filter","pId","removeSpringById","sId","s","removeBodyById","b","getElementById","selectModeBtn","insertModeBtn","moveModeBtn","connectModeBtn","deleteModeBtn","exportBtn","newBodyBtn","deleteBodyBtn","exportButton","newBodyButton","SELECT","MOVE","DELETE","addEventListener","_","exportData","map","p1","p2","JSON","stringify","handleExportClick","newBody","handleNewBodyClick","handleDeleteBodyClick","newParticle","handleMouseDown","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","handleMouseUp","handleModeClick","redrawAll","requestAnimationFrame","frame"],"sourceRoot":""}